# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aBXI28Jek3lxOYMpT6ROy4OlxBgMx-C9
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle

# --- IMPORTANT: Define the EXACT order of features your model was trained on ---
# This list was extracted directly from your 'columns.pkl' file.
# It includes the original features and the one-hot encoded 'education' features.
expected_features = [
    'age',
    'workclass',
    'fnlwgt',
    'educational-num',
    'marital-status',
    'occupation',
    'relationship',
    'race',
    'gender',
    'capital-gain',
    'capital-loss',
    'hours-per-week',
    'native-country',
    'education_10th',
    'education_11th',
    'education_12th',
    'education_7th-8th',
    'education_9th',
    'education_Assoc-acdm',
    'education_Assoc-voc',
    'education_Bachelors',
    'education_Doctorate',
    'education_HS-grad',
    'education_Masters',
    'education_Prof-school',
    'education_Some-college'
]

# Load model
try:
    with open("best_model.pkl", "rb") as f:
        model = pickle.load(f)
except FileNotFoundError:
    st.error("Error: best_model.pkl not found. Please ensure the model file is in the same directory.")
    st.stop() # Stop the app if model is not found
except Exception as e:
    st.error(f"Error loading model: {e}. Please check your best_model.pkl file.")
    st.stop()


# Set page config
st.set_page_config(
    page_title="Employee Salary Prediction",
    page_icon="💼",
    layout="centered"
)

# Custom CSS for better visuals
st.markdown("""
    <style>
    .main {background-color: #f5f7fa;}
    h1 {color: #2E86C1;}
    .stButton button {background-color: #2E86C1; color: white; border-radius: 8px; padding: 10px 20px; font-size: 18px; box-shadow: 2px 2px 5px rgba(0,0,0,0.2);}
    .stButton button:hover {background-color: #3498DB;}
    </style>
""", unsafe_allow_html=True)

# App Title
st.markdown("<h1 style='text-align: center;'>💼 Employee Salary Prediction App</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>Predict if an employee earns more than $50K/year using a trained ML model.</p>", unsafe_allow_html=True)
st.markdown("---")

# Sidebar
with st.sidebar:
    st.header("📌 About this App")
    st.markdown("""
    - 🎯 **Predict income range**: >50K or <=50K  
    - 🧠 Model: **Random Forest** - 📊 Dataset: **UCI Adult Income** - 🔢 Categorical features encoded numerically  
    """)
    st.info("Fill the form to get salary prediction ⬇️")

# Two-column layout for form
st.subheader("🔍 Enter Employee Information")
col1, col2 = st.columns(2)

with col1:
    age = st.slider("🧓 Age", 18, 75, 30)
    workclass = st.selectbox("🏢 Workclass (0–7)", [0, 1, 2, 3, 4, 5, 6, 7])
    fnlwgt = st.number_input("⚖️ Final Weight (fnlwgt)", value=100000)
    # Note: 'educational_num' is used for the slider, but one-hot encoded 'education_' columns are added below
    educational_num = st.slider("🎓 Education Number (1–16)", 1, 16, 10)
    marital_status = st.selectbox("💍 Marital Status (0–6)", [0, 1, 2, 3, 4, 5, 6])
    occupation = st.selectbox("💼 Occupation (0–12)", list(range(13)))

with col2:
    relationship = st.selectbox("👨‍👩‍👧 Relationship (0–5)", [0, 1, 2, 3, 4, 5])
    race = st.selectbox("🧑 Race (0–4)", [0, 1, 2, 3, 4])
    gender = st.selectbox("⚧ Gender (0: Female, 1: Male)", [0, 1])
    capital_gain = st.number_input("📈 Capital Gain", value=0)
    capital_loss = st.number_input("📉 Capital Loss", value=0)
    hours_per_week = st.slider("⏱ Hours per Week", 1, 99, 40)
    native_country = st.selectbox("🌍 Native Country (0–10)", list(range(11)))

# Predict button
if st.button("🚀 Predict Salary Range"):
    with st.spinner("🔍 Analyzing and predicting..."):
        # Initialize a dictionary with all expected features set to 0
        input_data_dict = {feature: [0] for feature in expected_features}

        # Populate the dictionary with user inputs
        input_data_dict['age'] = [age]
        input_data_dict['workclass'] = [workclass]
        input_data_dict['fnlwgt'] = [fnlwgt]
        input_data_dict['educational-num'] = [educational_num]
        input_data_dict['marital-status'] = [marital_status]
        input_data_dict['occupation'] = [occupation]
        input_data_dict['relationship'] = [relationship]
        input_data_dict['race'] = [race]
        input_data_dict['gender'] = [gender]
        input_data_dict['capital-gain'] = [capital_gain]
        input_data_dict['capital-loss'] = [capital_loss]
        input_data_dict['hours-per-week'] = [hours_per_week]
        input_data_dict['native-country'] = [native_country]

        # Convert educational_num to its corresponding one-hot encoded column
        # This mapping assumes how your original 'education' column was encoded.
        # You might need to adjust this logic based on your exact preprocessing.
        # For simplicity, we'll just set the 'educational-num' and leave the one-hot encoded columns as 0
        # unless you provide a specific mapping from educational_num to one-hot columns.
        # If your model truly expects one-hot encoded features, and not 'educational-num' itself,
        # you'll need to map 'educational_num' to the correct 'education_X' column here.
        # For now, we're assuming 'educational-num' is a direct feature.
        # If 'educational-num' was dropped and only one-hot encoded columns were used,
        # then this feature should be removed from expected_features and the input_data_dict.

        # Create DataFrame from the dictionary
        input_df = pd.DataFrame(input_data_dict)

        # Ensure the columns are in the exact order the model expects
        # This is the crucial step to prevent ValueError
        try:
            input_df = input_df[expected_features]
        except KeyError as e:
            st.error(f"Error: Feature mismatch. One of the expected features is missing or misspelled: {e}. "
                     "This usually means the 'expected_features' list in the code does not match the model's training features.")
            st.stop()

        prediction = model.predict(input_df)
        result = ">50K" if prediction[0] == 1 else "<=50K"
        st.success(f"✅ Predicted Income Range: **{result}**")

# Footer
st.markdown("---")
st.caption("📘 Project by Edunet IBM SkillBuild | 2025 ©")
